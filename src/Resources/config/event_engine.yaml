services:
    # General
    event_engine.cache:
        class: Symfony\Component\Cache\Adapter\FilesystemAdapter

    event_engine.connection:
        public: true
        class: ADS\Bundle\EventEngineBundle\Persistency\PDO
        arguments:
            $dsn: '%event_engine.pdo_dsn%'


    # Commands
    event_engine.command.data_reset:
        class: ADS\Bundle\EventEngineBundle\SymfonyCommand\EventEngineDataResetCommand
        arguments:
            - '@Prooph\EventStore\EventStore'
            - '@EventEngine\DocumentStore\DocumentStore'
            - '%event_engine.aggregates%'
        tags:
            - console.command

    event_engine.command.document_stores_create:
        class: ADS\Bundle\EventEngineBundle\SymfonyCommand\EventEngineDocumentStoresCreateCommand
        arguments:
            - '@EventEngine\DocumentStore\DocumentStore'
            - '%event_engine.aggregates%'
        tags:
            - console.command

    event_engine.command.projections_create:
        class: ADS\Bundle\EventEngineBundle\Projector\SymfonyCommand\EventEngineProjectionsCreateCommand
        arguments:
            - '@event_engine.connection'
        tags:
            - console.command

    event_engine.command.streams_create:
        class: ADS\Bundle\EventEngineBundle\SymfonyCommand\EventEngineEventStreamsCreateCommand
        arguments:
            - '@event_engine.connection'
            - '@Prooph\EventStore\EventStore'
            - '%event_engine.aggregates%'
        tags:
            - console.command

    event_engine.command.projectors_reset:
        class: ADS\Bundle\EventEngineBundle\Projector\SymfonyCommand\ResetProjections
        arguments:
            - '@Prooph\EventStore\Projection\ProjectionManager'
        tags:
            - console.command

    event_engine.command.projectors_run:
        class: ADS\Bundle\EventEngineBundle\Projector\SymfonyCommand\RunProjections
        arguments:
            - '@ADS\Bundle\EventEngineBundle\Projector\WriteModelStreamProjection'
        tags:
            - console.command

    # Interfaces
    Prooph\Common\Event\ActionEventEmitter: '@Prooph\Common\Event\ProophActionEventEmitter'
    Prooph\EventStore\EventStore: '@Prooph\EventStore\TransactionalActionEventEmitterEventStore'
    Prooph\EventStore\Pdo\PersistenceStrategy\PostgresPersistenceStrategy: '@ADS\Bundle\EventEngineBundle\Persistency\SingleStreamStrategy'
    Prooph\EventStore\TransactionalEventStore: '@Prooph\EventStore\Pdo\PostgresEventStore'

    EventEngine\DocumentStore\DocumentStore: '@EventEngine\DocumentStore\Postgres\PostgresDocumentStore'
    EventEngine\EventStore\EventStore: '@EventEngine\Prooph\V7\EventStore\ProophEventStore'
    EventEngine\Logger\LogEngine: '@EventEngine\Logger\SimpleMessageEngine'
    EventEngine\Persistence\MultiModelStore: '@EventEngine\Persistence\ComposedMultiModelStore'
    EventEngine\Persistence\TransactionalConnection: '@ADS\Bundle\EventEngineBundle\Persistency\TransactionalConnection'
    EventEngine\Runtime\Flavour: '@ADS\Bundle\EventEngineBundle\Flavour\OopMetaDataFlavour'
    EventEngine\Runtime\Functional\Port: '@ADS\Bundle\EventEngineBundle\Port\MessagePort'
    EventEngine\Runtime\Oop\Port: '@ADS\Bundle\EventEngineBundle\Port\EventSourceAggregatePort'
    EventEngine\Schema\Schema: '@EventEngine\JsonSchema\OpisJsonSchema'


    # Implementations
    Opis\JsonSchema\Validator: ~
    Prooph\EventStore\Pdo\WriteLockStrategy\PostgresAdvisoryLockStrategy:
        arguments:
            - '@event_engine.connection'
    Prooph\EventStore\TransactionalActionEventEmitterEventStore:
        arguments:
            - '@Prooph\EventStore\TransactionalEventStore'
            - '@Prooph\Common\Event\ActionEventEmitter'
    Prooph\EventStore\Pdo\PostgresEventStore:
        arguments:
            - '@EventEngine\Prooph\V7\EventStore\ProophEventStoreMessageFactory'
            - '@event_engine.connection'
            - '@Prooph\EventStore\Pdo\PersistenceStrategy\PostgresPersistenceStrategy'
            - 10000
            - 'event_streams'
            - false
            - '@Prooph\EventStore\Pdo\WriteLockStrategy\PostgresAdvisoryLockStrategy'
    Prooph\Common\Event\ProophActionEventEmitter:
        arguments:
            - !php/const Prooph\EventStore\TransactionalActionEventEmitterEventStore::ALL_EVENTS

    EventEngine\DocumentStore\Postgres\PostgresDocumentStore:
        arguments:
            - '@event_engine.connection'
            - '%event_engine.document_store.prefix%'
            - '%event_engine.document_store.id.schema%'
            - '%event_engine.document_store.transactional%'
    EventEngine\EventEngine:
        arguments:
            - '@EventEngine\Schema\Schema'
        configurator: '@ADS\Bundle\EventEngineBundle\Configurator'
    ADS\Bundle\EventEngineBundle\Message\ExtendedEventEngine:
        arguments:
            - '@ADS\Bundle\EventEngineBundle\Flavour\OopMetaDataFlavour'
            - '@command.bus'
            - '@event.bus'
            - '@query.bus'
    EventEngine\JsonSchema\OpisJsonSchema: ~
    EventEngine\Logger\SimpleMessageEngine:
        arguments:
            - '@logger'
    EventEngine\Persistence\ComposedMultiModelStore:
        arguments:
            - '@EventEngine\Persistence\TransactionalConnection'
            - '@EventEngine\EventStore\EventStore'
            - '@EventEngine\DocumentStore\DocumentStore'
    EventEngine\Prooph\V7\EventStore\ProophEventStore:
        arguments:
            - '@Prooph\EventStore\EventStore'
            - '%event_engine.event_store.transactional%'
    EventEngine\Prooph\V7\EventStore\ProophEventStoreMessageFactory: ~
    EventEngine\Runtime\FunctionalFlavour:
        arguments:
            - '@EventEngine\Runtime\Functional\Port'
    ADS\Bundle\EventEngineBundle\Flavour\FunctionalMetaDataFlavour:
        arguments:
            - '@EventEngine\Runtime\FunctionalFlavour'
    EventEngine\Runtime\OopFlavour:
        arguments:
            - '@EventEngine\Runtime\Oop\Port'
            - '@EventEngine\Runtime\FunctionalFlavour'
    ADS\Bundle\EventEngineBundle\Flavour\OopMetaDataFlavour:
        arguments:
            - '@EventEngine\Runtime\OopFlavour'
            - '@ADS\Bundle\EventEngineBundle\Flavour\FunctionalMetaDataFlavour'

    ADS\Bundle\EventEngineBundle\Aggregate\AggregateRoot: ~
    ADS\Bundle\EventEngineBundle\Aggregate\DeletableAggregate: ~
    ADS\Bundle\EventEngineBundle\Aggregate\EventSourced: ~

    ADS\Bundle\EventEngineBundle\Config:
        arguments:
            - '@EventEngine\EventEngine'
            - '@event_engine.cache'
            - '%kernel.environment%'
        tags:
            - { name: kernel.cache_clearer }
    ADS\Bundle\EventEngineBundle\Configurator:
        arguments:
            - '@EventEngine\Runtime\Flavour'
            - '@EventEngine\Persistence\MultiModelStore'
            - '@EventEngine\Logger\LogEngine'
            - '@service_container'
            - '%kernel.environment%'
            - '%kernel.debug%'
            - '%event_engine.commands%'
            - '%event_engine.queries%'
            - '%event_engine.events%'
            - '%event_engine.aggregates%'
            - '%event_engine.types%'
            - '%event_engine.listeners%'
            - '%event_engine.projectors%'
            - '%event_engine.pre_processors%'
            - '%event_engine.descriptions%'
            - '@?event_engine.event_queue'
    ADS\Bundle\EventEngineBundle\Persistency\SingleStreamStrategy: ~
    ADS\Bundle\EventEngineBundle\Persistency\TransactionalConnection:
        arguments:
            - '@event_engine.connection'
    ADS\Bundle\EventEngineBundle\Port\EventSourceAggregatePort: ~
    ADS\Bundle\EventEngineBundle\Port\MessagePort:
        arguments:
            - '@Opis\JsonSchema\Validator'
    ADS\Bundle\EventEngineBundle\Repository\Repository: ~
    ADS\Bundle\EventEngineBundle\Repository\DefaultProjectionRepository: ~
    ADS\Bundle\EventEngineBundle\Util\EventEngineUtil: ~
    ADS\Bundle\EventEngineBundle\Exception\Handler:
        tags:
            - 'kernel.event_subscriber'

    Prooph\EventStore\Projection\ProjectionManager:
        class: Prooph\EventStore\Pdo\Projection\PostgresProjectionManager
        arguments:
            - '@Prooph\EventStore\EventStore'
            - '@event_engine.connection'

    ADS\Bundle\EventEngineBundle\Projector\WriteModelStreamProjection:
        arguments:
            - '@Prooph\EventStore\Projection\ProjectionManager'
            - '@EventEngine\EventEngine'
    ADS\Bundle\EventEngineBundle\Projector\ReadModelProxy:
        arguments:
            - '@EventEngine\EventEngine'

    ADS\Bundle\EventEngineBundle\Validator\Validator:
        decorates: 'validator'
        arguments:
            - '@.inner'

    ADS\Bundle\EventEngineBundle\Message\Handler\Handler:
        abstract: true
        arguments:
            - '@EventEngine\EventEngine'
            - '@ADS\Bundle\EventEngineBundle\Flavour\OopMetaDataFlavour'

    ADS\Bundle\EventEngineBundle\Lock\StoreFactory:
    lock.postgres.store:
        factory: '@ADS\Bundle\EventEngineBundle\Lock\StoreFactory'
        arguments:
            - '%event_engine.pdo_dsn%'

    lock.aggregate.factory:
        class: Symfony\Component\Lock\LockFactory
        arguments:
            - '@lock.postgres.store'

    ADS\Bundle\EventEngineBundle\Message\Handler\CommandHandler:
        parent: 'ADS\Bundle\EventEngineBundle\Message\Handler\Handler'
        arguments:
            $aggregateLockFactory: '@lock.aggregate.factory'
        tags:
            - { name: messenger.message_handler, bus: command.bus }
        autoconfigure: false

    ADS\Bundle\EventEngineBundle\Message\Handler\EventHandler:
        parent: 'ADS\Bundle\EventEngineBundle\Message\Handler\Handler'
        tags:
            - { name: messenger.message_handler, bus: event.bus }
        autoconfigure: false

    ADS\Bundle\EventEngineBundle\Message\Handler\QueryHandler:
        parent: 'ADS\Bundle\EventEngineBundle\Message\Handler\Handler'
        tags:
            - { name: messenger.message_handler, bus: query.bus }
        autoconfigure: false

